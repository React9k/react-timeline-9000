/**
 * BackgroundLayer has `position: absolute`, but it is positioned relative to its closest positioned ancestor, if any;
 * otherwise, it is positioned relative to the initial containing block. In this case,
 * BackgroundLayer did not have any positioned ancestor and it was positioned relative to viewport.
 *
 * We want to position BackgroundLayer relative to the direct parent. In order to do this, we need to add `position` to the `parent-div`.
 * An element with `position: relative` is positioned relative to its normal position in the document flow, but its position can be
 * adjusted using the `top`, `bottom` etc. We will not adjust the `top`, `bottom` etc. of `parent-div`, we only want to set a position to it.
 */
.parent-div {
  position: relative;
}

.rct9k-background-layer-vertical-grid {
  position: absolute;
  overflow: hidden;
  white-space: nowrap;
}

.rct9k-background-layer-vertical-line:first-child {
  border: 0 !important;
}

.rct9k-background-layer-vertical-line {
  height: 100%;
  display: inline-block;
  border-left: 1px solid;
}

/**
* By default semantic ui vertical menu has a width of 15rem. That's why larger content were truncated
* in the context menu 
*/
.rct9k-context-menu {
  width: unset !important;
  min-width: 15rem;
}

.rct9k-drag-to-create-popup-buttons-div {
  text-align: center;
}

.rct9k-drag-to-create-popup-buttons-div > button {
  margin-top: 5px !important;
}

.rct9k-drag-to-create-popup-hint-div {
  font-style: italic;
  font-size: small;
}

.rct9k-timebar-item:first-child {
  border: 0 !important;
}

.rct9k-highlighted-interval {
  position: absolute;
  background: #eeeeff;
}

.rct9k-horizontal-scrollbar-outter {
  height: auto;
  overflow-x: scroll;
  width: 100%;
}

.rct9k-horizontal-scrollbar-inner {
  height: 1px;
}

.rct9k-vertical-scrollbar-outter {
  width: auto;
  overflow-y: scroll;
  height: 100%;
}

.rct9k-vertical-scrollbar-inner {
  width: 1px;
}

.rct9k-background-layer-highlight-weekends {
  background: #fff7ee;
  opacity: 1;
}

.rct9k-timeline-div {
  width: 100%;
  /* if the timeline is in a flex layout, we want it to adapt to the parent */
  flex-grow: 1;
  /* if the user just added the timeline to his app, maybe he didn't provide a flex parent; w/o this, he would see segments at all; 
    w/ this, he sees at least something, and then will think of improving the parent layout
  */
  min-height: 200px;
  background-color: #a5a5a5;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Timeline items */
.rct9k-items-outer {
  white-space: nowrap;
  position: absolute;
  display: flex;
  overflow: visible;
  z-index: 3;
}

/* Styles that draws the drag achors that appears on selecting an element */
.rct9k-items-outer-selected:after {
  right: -2.5px;
  z-index: 1;
}

.rct9k-items-outer-selected:before {
  left: -2.5px;
  z-index: 1;
}

.rct9k-items-outer-selected:before,
.rct9k-items-outer-selected:after {
  content: '';
  border: 1px solid white;
  height: 6px;
  width: 6px;
  background-color: black;
  top: 50%;
  transform: translateY(-50%);
  position: absolute;
}

.rct9k-items-outer-selected .rct9k-items-inner {
  filter: brightness(1.15);
  box-shadow: 3px 3px 8px -3px black;
}

.rct9k-items-inner {
  display: flex;
  padding: 3px;
  margin: 5px 0;
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
}

.rct9k-marker {
  position: absolute;
  margin: 0;
  background: #a9a9e6;
  width: 2px;
  border: 0;
}

.rct9k-marker-overlay {
  z-index: 4;
  height: 475px;
  position: absolute;
  width: 2px;
  background: red;
  pointer-events: none;
}

.rct9k-background-layer-now-marker {
  background: red;
  width: 2px;
}

.rct9k-item-renderer {
  opacity: 0.8;
  border: darkgrey solid 1px;
  border-radius: 3px;
}

.rct9k-item-renderer-inner {
  pointer-events: none;
  align-self: center;
}

.rct9k-item-glow {
  box-shadow: 0;
  transition: opacity 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.rct9k-item-glow:hover {
  box-shadow: 0 0 12px #2d618c;
  opacity: 1 !important;
}

.rct9k-row {
  /* white-space: nowrap; */
  box-sizing: border-box;
  border: 1px solid #ccc !important;
  border-top: 0 !important;
  border-left: 0 !important;
}

.rct9k-row-even {
  background-color: #f6f7f8;
}

.rct9k-grid {
  border-bottom: 1px solid #ccc;

  /* This was added because we needed to have the highlighted intervals and markers behind the segments, 
  but in front of the rows (because they are opaque, being colored). 
  The only way to achive this via css is by having the z-index of the segments > z-index of the highlighted intervals and markers,
  and the segments not being in a different stacking context than the highlighted intervals 
  (for understanding the "stacking context" concept see https://www.joshwcomeau.com/css/stacking-contexts/)

  As stated in the above article, "will-change" creates a stacking context for its children so 
  even if segments.z-index > highlightedIntervals.z-index, the segments were displayed behind the highlighted intervals
  
  !!! We need to pay attention for this to not cause any performance issue: 
  the "will-change: transform;" was set by the virtualized grid component to prevent a performance issue: https://github.com/bvaughn/react-virtualized/blob/e78651c3d844c6f639347d1fb796072783c175d2/CHANGELOG.md?plain=1#L1082
  But strange thing: from our tests this seems to improve the performance of the scroll.  
  
  If we'll have problems in the future the solution to the initial problem will be to refactor the structure of our components (the dom)
  so that the highlighted intervals and markers to be children of rct9k-grid (now they are siblings)
  */
  will-change: unset !important;
}

/**
 * EM: RM27551 - in Firefox (on some computers), when we click on the body of the timeline, a blue outline is shown around the body.
 * After some investigation, it seems that an outline is applied by the browser on `:focus-visible`.
 */
.rct9k-grid:focus-visible {
  outline: none !important;
}

.ReactVirtualized__Grid {
  overflow-x: hidden;
}

.ReactVirtualized__Grid__innerScrollContainer:first-child {
  border-top: 1px solid #ccc;
}

/* Timeline groups */
.rct9k-group {
  text-align: center;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-top: 0;
  border-right: 0;
  background-color: white;
  z-index: 6;
}

.rct9k-group {
  border-right: 2px solid #ccc;
}

.rct9k-timebar {
  display: flex;
}

/* Timeline top timebar */
.rct9k-timebar {
  display: flex;
}

.rct9k-timebar-outer,
.rct9k-timebar-group-title {
  height: 60px;
  background-color: white;
  border: 1px solid #ccc;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

.rct9k-timebar-outer {
  border-left: 1px solid #ccc;
  background-image: linear-gradient(#fff, #efefef);
}

.rct9k-timebar-inner {
  height: 30px;
  white-space: nowrap;
  overflow: hidden;
}

.rct9k-timebar-item {
  text-align: center;
  display: inline-block;
  border-left: 1px solid;
  white-space: nowrap;
  box-sizing: border-box;
  height: 100%;
  padding: 5px;
}

.rct9k-timebar-inner.rct9k-timebar-inner-bottom {
  border-top: 1px solid #ccc;
}

.rct9k-timebar-item-selected {
  background-color: lightblue;
}

.rct9k-timebar-group-title {
  border-right: 2px solid #ccc;
}

.rct9k-timeline-div {
  background-color: #fff;
  font-size: 12px;
  height: 100%;
}

/* Multi-select box */
.rct9k-selector-outer {
  display: inline-block;
  background-color: #5bb3ff80;
  width: 1px;
  height: 1px;
  position: fixed;
  z-index: 5;
}

.rct9k-selector-outer-add {
  background-color: #b0e09dab;
}

/* Row layer */
.rct9k-row-layer {
  pointer-events: none;
  position: absolute;
  z-index: 1;
}

#root {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.Resizer.vertical {
  width: 4px !important;
  border-left-width: 1px !important;
  border-right-width: 1px !important;
}

.rct9k-menu-div {
  position: absolute;
  right: 1px;
  top: 1px;
}

.rct9k-menu.ui.popup {
  padding: 0 !important;
  margin: 0 !important;
}

.no-margin {
  margin: 0 !important;
}

.rct9k-timebar-inner.rct9k-timebar-inner-bottom {
  border-top: 1px solid #ccc !important;
}

.rct9k-timebar-item {
  border-left-color: #ccc !important;
}
